---

#      - name: Kill current running process
#        command: pm2 stop {{remote_path}}/{{app}}/app.js
#        ignore_errors: yes
      - name: Remove Scheduled Jobs
        shell: crontab -l|grep -v {{app}}|crontab -
        ignore_errors: yes
        # remove the {ver} abnd fetch the file using file find contains
        # signal error if found more than one
      - name: Finding Deliverable path
        local_action: stat path=/msservice/app/workspace/{{app}}/project/dist/{{app}}-V{{ver}}.tar.gz
        register: files
        # delete this part
      - name: Check the ear file
        fail: msg="deliverable files doesn't exist"
        when: not files.stat.exists
        # check what the hell are we doing here
      - name: checkvar transfer
        copy: src={{script_path}}/checkvar.sh dest=/home/dofuser/scripts
        when: files.stat.exists
      - name: Transfer scheduling scripts
        copy: src={{script_path}}/makecronfile.sh dest=/tmp
      - name: Assign permissions
        shell: chmod 777 /tmp/makecronfile.sh 
        # if the checkvar is there move it, otherwise skip this
      - name: source variables
        shell: source /home/dofuser/scripts/checkvar.sh
        # I think this is not needed
      - name: Checking Deployment Folder....
        stat: path={{remote_path}}/{{app}}/
        register: dircheck
        ignore_errors: yes
      - name: output env var
        shell: echo $COUCHBASE_CONFIG_BUCKET
      - name: Preparing deployment folder
        shell: rm -rf {{remote_path}}/{{app}}
        when: dircheck.stat.exists
        ignore_errors: yes
        #get rid of the {ver}
      - name: ssh file to destination
        copy: src=/msservice/app/workspace/{{app}}/project/dist/{{app}}-V{{ver}}.tar.gz dest=/tmp
        when: files.stat.exists
      - name: Creating app dir
        shell: mkdir {{remote_path}}/{{app}}/
        # dont ignore error
        ignore_errors: yes
      - name: extracting archive
        shell: tar xvf /tmp/{{app}}-V{{ver}}.tar.gz -C {{remote_path}}/{{app}}/
      - name: Generate Logs folder
        shell: mkdir {{remote_path}}/{{app}}/logs
      - name: Check if script executable exists
        stat: path={{remote_path}}/{{app}}/scripts
        register: scripts
        ignore_errors: yes
      - name: Check if JSON data needs to be loaded
        stat: path={{remote_path}}/{{app}}/scripts/data
        register: json
        ignore_errors: yes
      - debug: msg="No script execution needed skipping to next step"
        when: not scripts.stat.exists
        # dont ignore error
      - name: Run remote scripts
        shell: chmod 755 -R {{remote_path}}/{{app}}/scripts/ &&  sh {{remote_path}}/{{app}}/scripts/create-all.sh {{syncdb}}
        when: scripts.stat.exists
        ignore_errors: yes
        # this is for the json documents before going to couch-base, dont ignore errors
      - name: adapt proxy  placeholders w.r.t environment
        local_action: shell sh /home/msservice/ansible/roles/common/scripts/proxyplaceholders.sh {{env}} {{app}}
      - name: adapt placeholders w.r.t environment
        local_action: shell sh /home/msservice/ansible/roles/common/scripts/placeholders.sh {{env}} {{app}}  
      - name: Archive couchbase json documents
        local_action: shell sh ~/ansible/roles/common/scripts/zipjson.sh {{app}}
      - name: Load json documents in Couchbase
        local_action: command /home/msservice/ansible/bin/ansible-playbook /home/msservice/ansible/play-book/couchdocs.yml --extra-vars="bucket={{bucket}} env={{env}} app={{app}}"
        when: json.stat.exists
        ignore_errors: yes
        # bucket is always config, remove this
        when: bucket is defined
      - name: start pm2 process
        command: pm2 restart {{remote_path}}/{{app}}/app.js --name="{{app}}"
      - name: generate Cronfile
        shell: sh /tmp/makecronfile.sh /app/node-apps/{{app}}/scripts/cron
        # assign permission for the content in /scripts also
      - name: Assign script permissions
        shell: cd /app/node-apps/{{app}}/scripts/cron/ && chmod 755 *.sh
        ignore_errors: yes
      - name: Schedule Jobs
        shell: crontab -l 2>/dev/null|cat - /tmp/filelist|crontab -
        #do this only once a day otherwise they jeopardize concurrent deployment
      - name: remove filelist
        shell: rm -rf /tmp/filelist /tmp/makecronfile.sh /tmp/filelist
        ignore_errors: yes
        #do this only once a day otherwise they jeopardize concurrent deployment
      - name: Clearing temporary files
        shell: rm -rf /tmp/ansible-tmp-* 
